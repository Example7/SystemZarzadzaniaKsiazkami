// <auto-generated />
using System;
using AppData.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppData.Migrations
{
    [DbContext(typeof(AppData.Data.AppContext))]
    [Migration("20250509123038_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppData.Data.CMS.Aktualnosc", b =>
                {
                    b.Property<int>("IdAktualnosci")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAktualnosci"));

                    b.Property<string>("LinkTytul")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Pozycja")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdAktualnosci");

                    b.ToTable("Aktualnosc");
                });

            modelBuilder.Entity("AppData.Data.CMS.Strona", b =>
                {
                    b.Property<int>("IdStrony")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStrony"));

                    b.Property<string>("LinkTytul")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Pozycja")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdStrony");

                    b.ToTable("Strona");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Autor", b =>
                {
                    b.Property<int>("AutorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutorID"));

                    b.Property<string>("ImieNazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AutorID");

                    b.ToTable("Autor");
                });

            modelBuilder.Entity("AppData.Data.Sklep.DaneKontaktowe", b =>
                {
                    b.Property<int>("UzytkownikID")
                        .HasColumnType("int");

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodPocztowy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miasto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UzytkownikID");

                    b.ToTable("DaneKontaktowe");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Kategoria", b =>
                {
                    b.Property<int>("KategoriaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategoriaID"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategoriaID");

                    b.ToTable("Kategoria");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Ksiazka", b =>
                {
                    b.Property<int>("KsiazkaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KsiazkaID"));

                    b.Property<int>("AutorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KategoriaID")
                        .HasColumnType("int");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WydawnictwoID")
                        .HasColumnType("int");

                    b.HasKey("KsiazkaID");

                    b.HasIndex("AutorID");

                    b.HasIndex("KategoriaID");

                    b.HasIndex("WydawnictwoID");

                    b.ToTable("Ksiazka");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Kupon", b =>
                {
                    b.Property<int>("KuponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KuponID"));

                    b.Property<DateTime>("DataWaznosci")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MinimalnaWartosc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TypZnizki")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WartoscZnizki")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("KuponID");

                    b.ToTable("Kupon");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Recenzja", b =>
                {
                    b.Property<int>("RecenzjaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecenzjaID"));

                    b.Property<DateTime>("DataDodania")
                        .HasColumnType("datetime2");

                    b.Property<int>("KsiazkaID")
                        .HasColumnType("int");

                    b.Property<int>("Ocena")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UzytkownikID")
                        .HasColumnType("int");

                    b.HasKey("RecenzjaID");

                    b.HasIndex("KsiazkaID");

                    b.HasIndex("UzytkownikID");

                    b.ToTable("Recenzja");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Uzytkownik", b =>
                {
                    b.Property<int>("UzytkownikID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UzytkownikID"));

                    b.Property<bool>("CzyAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasloHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UzytkownikID");

                    b.ToTable("Uzytkownik");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Wydawnictwo", b =>
                {
                    b.Property<int>("WydawnictwoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WydawnictwoID"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WydawnictwoID");

                    b.ToTable("Wydawnictwo");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Zamowienie", b =>
                {
                    b.Property<int>("ZamowienieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZamowienieID"));

                    b.Property<DateTime>("DataZamowienia")
                        .HasColumnType("datetime2");

                    b.Property<int?>("KuponID")
                        .HasColumnType("int");

                    b.Property<int>("UzytkownikID")
                        .HasColumnType("int");

                    b.HasKey("ZamowienieID");

                    b.HasIndex("KuponID");

                    b.HasIndex("UzytkownikID");

                    b.ToTable("Zamowienie");
                });

            modelBuilder.Entity("AppData.Data.Sklep.ZamowienieKsiazka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ilosc")
                        .HasColumnType("int");

                    b.Property<int>("KsiazkaID")
                        .HasColumnType("int");

                    b.Property<int>("ZamowienieID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KsiazkaID");

                    b.HasIndex("ZamowienieID");

                    b.ToTable("ZamowienieKsiazka");
                });

            modelBuilder.Entity("AppData.Data.Sklep.DaneKontaktowe", b =>
                {
                    b.HasOne("AppData.Data.Sklep.Uzytkownik", "Uzytkownik")
                        .WithOne("DaneKontaktowe")
                        .HasForeignKey("AppData.Data.Sklep.DaneKontaktowe", "UzytkownikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Ksiazka", b =>
                {
                    b.HasOne("AppData.Data.Sklep.Autor", "Autor")
                        .WithMany("Ksiazki")
                        .HasForeignKey("AutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppData.Data.Sklep.Kategoria", "Kategoria")
                        .WithMany("Ksiazki")
                        .HasForeignKey("KategoriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppData.Data.Sklep.Wydawnictwo", "Wydawnictwo")
                        .WithMany("Ksiazki")
                        .HasForeignKey("WydawnictwoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Kategoria");

                    b.Navigation("Wydawnictwo");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Recenzja", b =>
                {
                    b.HasOne("AppData.Data.Sklep.Ksiazka", "Ksiazka")
                        .WithMany("Recenzje")
                        .HasForeignKey("KsiazkaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppData.Data.Sklep.Uzytkownik", "Uzytkownik")
                        .WithMany("Recenzje")
                        .HasForeignKey("UzytkownikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ksiazka");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Zamowienie", b =>
                {
                    b.HasOne("AppData.Data.Sklep.Kupon", "Kupon")
                        .WithMany("Zamowienia")
                        .HasForeignKey("KuponID");

                    b.HasOne("AppData.Data.Sklep.Uzytkownik", "Uzytkownik")
                        .WithMany("Zamowienia")
                        .HasForeignKey("UzytkownikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kupon");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("AppData.Data.Sklep.ZamowienieKsiazka", b =>
                {
                    b.HasOne("AppData.Data.Sklep.Ksiazka", "Ksiazka")
                        .WithMany("ZamowieniaKsiazki")
                        .HasForeignKey("KsiazkaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppData.Data.Sklep.Zamowienie", "Zamowienie")
                        .WithMany("ZamowieniaKsiazki")
                        .HasForeignKey("ZamowienieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ksiazka");

                    b.Navigation("Zamowienie");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Autor", b =>
                {
                    b.Navigation("Ksiazki");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Kategoria", b =>
                {
                    b.Navigation("Ksiazki");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Ksiazka", b =>
                {
                    b.Navigation("Recenzje");

                    b.Navigation("ZamowieniaKsiazki");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Kupon", b =>
                {
                    b.Navigation("Zamowienia");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Uzytkownik", b =>
                {
                    b.Navigation("DaneKontaktowe");

                    b.Navigation("Recenzje");

                    b.Navigation("Zamowienia");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Wydawnictwo", b =>
                {
                    b.Navigation("Ksiazki");
                });

            modelBuilder.Entity("AppData.Data.Sklep.Zamowienie", b =>
                {
                    b.Navigation("ZamowieniaKsiazki");
                });
#pragma warning restore 612, 618
        }
    }
}
